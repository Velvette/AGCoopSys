/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mainaddinterface;

import utilities.QueryWarehouse;
import mainprocesses.LoanDetailCalculate;
import mainconnect.ConnectToDatabaseSys;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Lenovo
 */
public class AddLoan extends javax.swing.JFrame {

    public String dbUrl;
    public String dbDriver;
    public String username;
    public String password;
    public Connection conn;
    ConnectToDatabaseSys paramDB = new ConnectToDatabaseSys();
    float monthlyAmortization;
    
    String memberID;
    String loanType;
    Date startdt;
    Date enddt;
    Date currentDate; 
   DateFormat df;
    DateFormat df2;
    String startdtString = "";
    String enddtString = "";
    String currentdtString = "";
    float principal = 0;
    float interest = 0;
    float interestrt = 0;
    float totalPayment = 0;
    int terms  = 0;
    int loanID;
    Date tempCal;
    String checkNo = "";
    LoanDetailCalculate loanCalculate = new LoanDetailCalculate();
    int choice = 0;
    
    
    public AddLoan() {
        initComponents();
        this.df = new SimpleDateFormat("yyyy-MM-dd");
        df.setLenient(false);
        Calendar cal = Calendar.getInstance();
        Date current = new Date();
        current = cal.getTime();
        textStartDate.setText(df.format(current));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelMember = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboTypeOfLoan = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        textPrincipal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textTerms = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textStartDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textEndDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textInterest = new javax.swing.JTextField();
        buttonConfirm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        labelAmortization = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labelTotalPayment = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labelTotalInterest = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        labelTotalPrincipal = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        buttonCancel = new javax.swing.JButton();
        buttonCompute = new javax.swing.JButton();
        textCheckNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        buttonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Member");

        labelMember.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Type");

        comboTypeOfLoan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Regular", "Calamity", "Educational", "Emergency" }));
        comboTypeOfLoan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTypeOfLoanItemStateChanged(evt);
            }
        });
        comboTypeOfLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTypeOfLoanActionPerformed(evt);
            }
        });

        jLabel4.setText("Principal");

        textPrincipal.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textPrincipalCaretUpdate(evt);
            }
        });

        jLabel5.setText("Terms (Months)");

        jLabel6.setText("Start Date");

        textStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStartDateActionPerformed(evt);
            }
        });

        jLabel7.setText("End Date");

        textEndDate.setEditable(false);
        textEndDate.setEnabled(false);

        jLabel8.setText("Interest Rate");

        buttonConfirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/confirm.png"))); // NOI18N
        buttonConfirm.setToolTipText("Confirm");
        buttonConfirm.setEnabled(false);
        buttonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmActionPerformed(evt);
            }
        });

        jLabel2.setText("Monthly Amortization");

        labelAmortization.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setText("Total Payment");

        labelTotalPayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setText("Total Interest");

        labelTotalInterest.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setText("Total Principal");

        labelTotalPrincipal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelIcon.png"))); // NOI18N
        buttonCancel.setToolTipText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonCompute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/generate.png"))); // NOI18N
        buttonCompute.setToolTipText("Compute");
        buttonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComputeActionPerformed(evt);
            }
        });

        textCheckNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCheckNoActionPerformed(evt);
            }
        });

        jLabel12.setText("Check No");

        buttonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eraser.png"))); // NOI18N
        buttonClear.setToolTipText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(comboTypeOfLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textCheckNo)
                                    .addComponent(textInterest, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonCompute, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAmortization, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelTotalInterest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textTerms, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelTotalPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMember, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboTypeOfLoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(textInterest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCheckNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTerms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAmortization, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(labelTotalPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(labelTotalInterest, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(labelTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonCompute)
                    .addComponent(buttonClear)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonConfirm)
                        .addComponent(buttonCancel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textPrincipalCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textPrincipalCaretUpdate

        //EVENT
        // TODO add your handling code here:
    }//GEN-LAST:event_textPrincipalCaretUpdate

    private void textStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textStartDateActionPerformed
       public void connect()
    {
        dbDriver = paramDB.getDbClass();
        dbUrl = paramDB.getDbUrl();
        password = paramDB.getPassword(); // CHANGE PASSWORD
        username = paramDB.getName();
                
        try
        {
            Class.forName(dbDriver).newInstance();
            conn = DriverManager.getConnection(dbUrl,username,password);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
        
    public Connection getConnection()
    {
	return conn;
    }
	
    public void disconnect()
    {
       try
       {
            conn.close();
       } 
       catch (Exception ex)
       {
            ex.printStackTrace();
       }
    }
    
    public void initStart(String startd) throws ParseException
    {
           Date start = df.parse(startd);
           String sStart = df.format(start);
           textStartDate.setText(sStart);
    }
    
    public void initEnd(String startd) throws ParseException
    {
           Date start = df.parse(startd);
           String sStart = df.format(start);
           textStartDate.setText(sStart);
    }
    
    public void initCombo(String type)
    {
        switch(type) 
        {
            case "E":
                comboTypeOfLoan.setSelectedIndex(3);
                break;
            case "M":
                comboTypeOfLoan.setSelectedIndex(4);
                break;
            case "R":
                comboTypeOfLoan.setSelectedIndex(1);
                break;
            case "C":
                comboTypeOfLoan.setSelectedIndex(2);
                break;
        }
    }
        
    public void addLoan(String wholeName,String id)
    {
        memberID = id;
        labelMember.setText(wholeName);
    }
    
    public void editLoan(String wholeName,  String id)
    {
        ResultSet rs;
        this.connect();
        Statement stmt = null;
        String query = "select * from loan_hdr where loanid="+id;
        loanID = Integer.parseInt(id);
        try
        {
            stmt = conn.createStatement();
        }
                
	catch (SQLException e)
        {
            e.printStackTrace();
        }
        String tempStart = "";
        String tempEnd = "";
        String type = "";
        try
        {
            rs = stmt.executeQuery(query);
            if(rs.next())
            {
                textInterest.setText(rs.getString("interestrt"));
                textPrincipal. setText(rs.getString("loanamt"));
                textTerms.setText(rs.getString("montopay"));
                textCheckNo.setText(rs.getString("checkno"));
                type = rs.getString("loantype");
                memberID = rs.getString("memberid");
                tempStart = rs.getString("startdt");
                labelMember.setText(wholeName);
            }
            this.disconnect();      
	}
        
        catch (SQLException e)
        {
	}   
        choice = 1;
        try
        {
            this.initStart(tempStart);
        }
        catch(Exception e)
        {
            
        }
    }
    
    private void buttonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComputeActionPerformed
        
        String errorMessage = "";
        boolean error = true;

        try
        {
            loanCalculate.setMonthlyInterest(Float.parseFloat(textInterest.getText())); 
        }
        catch(Exception e)
        {
            //System.out.println("error");
            error = false;
        }
        try{
            loanCalculate.setPrincipalBalance(Float.parseFloat(textPrincipal.getText()));
        }
        catch(Exception r)
        {
            error = false;
        }
        try
        {
           loanCalculate.setTotalNumberOfPayment(Integer.parseInt(textTerms.getText())); 
        }
        catch(Exception t)
        {
            error = false;
        }
        
        loanType = comboTypeOfLoan.getSelectedItem().toString();
                   switch (loanType) {
                case "Regular":
                    loanType = "R";
                    break;
                case "Calamity":
                    loanType = "C";
                    break;
                case "Educational":
                    loanType = "E";
                    break;
                case "Emergency":
                    loanType = "M";
                    break;
           }
        Date grantdt = new Date();
        currentDate = grantdt;
        checkNo = textCheckNo.getText();
        
        if(error)
        {
           loanCalculate.getAmortization();
           principal = Float.parseFloat(textPrincipal.getText());
           monthlyAmortization = loanCalculate.getMonthlyPayment();
           interest = loanCalculate.getInterest();
           interestrt = Float.parseFloat(textInterest.getText());
           totalPayment = loanCalculate.getTotAmortization();
           terms = Integer.parseInt(textTerms.getText());
           
           labelAmortization.setText(Float.toString(monthlyAmortization));
           labelTotalPayment.setText(Float.toString(totalPayment));
           labelTotalInterest.setText(Float.toString(loanCalculate.getTotInterest()));
           labelTotalPrincipal.setText(Float.toString(principal));
           
                          
           if(textStartDate.getText().length() != 0)
           {
                try
                {  
                    startdt = (Date) df.parse(textStartDate.getText());
                    tempCal = (Date) df.parse(textStartDate.getText());
                
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(startdt);
                
                    cal.set(Calendar.MONTH, (cal.get(Calendar.MONTH)+ Integer.parseInt(textTerms.getText())-1));
                
                    enddt = cal.getTime();
                    startdtString = df.format(startdt);
                    enddtString = df.format(enddt);
                    currentdtString = df.format(currentDate);
                    textEndDate.setText(enddtString);
                
                    //System.out.println(loanType);
                    //System.out.println("current:" + startdtString + " ||| " + "end: " + enddtString);
                } 
                catch (ParseException | NumberFormatException q)
                { 
                
                } 
           }
           
           comboTypeOfLoan.setEnabled(false);
           buttonConfirm.setEnabled(true);
           buttonCompute.setEnabled(false);
        }
    }//GEN-LAST:event_buttonComputeActionPerformed

    private void buttonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmActionPerformed

        if(paramDB.checkDuplicateLoan(memberID,loanType))
        {
            this.firstBreakCommit();
            this.secondBreakCommit();            
        }
        else
            JOptionPane.showMessageDialog(null, "Error: Current type of loan exists", "Error", JOptionPane.ERROR_MESSAGE); 
        
        comboTypeOfLoan.setEnabled(true);
        buttonConfirm.setEnabled(false);
        buttonCompute.setEnabled(true);
        loanCalculate.reset();
    }//GEN-LAST:event_buttonConfirmActionPerformed

    private void comboTypeOfLoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTypeOfLoanActionPerformed

        
    }//GEN-LAST:event_comboTypeOfLoanActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void textCheckNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCheckNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCheckNoActionPerformed

    private void comboTypeOfLoanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTypeOfLoanItemStateChanged

        // TODO add your handling code here:
    }//GEN-LAST:event_comboTypeOfLoanItemStateChanged

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed

        this.allReset();
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonClearActionPerformed

    public void firstBreakCommit()
    {
            QueryWarehouse bank = new QueryWarehouse();
            String query = "";
            if(choice == 0)
            query = bank.loanFirstCommit(memberID, loanType, currentdtString, startdtString, enddtString, principal, terms, interestrt, interest, totalPayment, monthlyAmortization, checkNo);
            
            if(choice == 1)
            query = bank.updateLoanFirstCommit(loanID, memberID, loanType, currentdtString, startdtString, enddtString, principal, terms, interestrt, interest, totalPayment, monthlyAmortization, checkNo);
                
            //System.out.println(query);
            this.connect();
            Statement stmt = null;
        
            try
            {
                stmt = conn.createStatement();
            }
            catch(Exception e)
            {
            
            }
        
            try
            {
                stmt.addBatch(query);
                stmt.executeBatch();
            }
            catch (SQLException ex)
            {
            
            }
        
            finally{
                this.disconnect();
            }
    }
    
    public void secondBreakCommit()
    {
        if(choice == 0)
        {
            this.getID();
        
            Date repEnd;
            repEnd = startdt;
        
            float arrayInterest[] = new float[terms];
            float arrayPremium[] = new float[terms];
        
            arrayInterest = loanCalculate.getInterestRecur(terms, principal);
            arrayPremium = loanCalculate.getPremiumRecur(terms, principal);
        
            this.getInsertAmortDates(repEnd, terms, arrayInterest,arrayPremium, loanID, monthlyAmortization);
        }
        else if(choice == 1)
        {
            Date repEnd;
            repEnd = startdt;
        
            float arrayInterest[] = new float[terms];
            float arrayPremium[] = new float[terms];
        
            arrayInterest = loanCalculate.getInterestRecur(terms, principal);
            arrayPremium = loanCalculate.getPremiumRecur(terms, principal);
            this.deleteAmortDates();
            this.getInsertAmortDates(repEnd, terms, arrayInterest,arrayPremium, loanID, monthlyAmortization);
        }
    }
    
    public void deleteAmortDates()
    {
        String query = "delete from loan_dtl where loanid="+loanID;
        paramDB.accessLoopDatabase(query);
    }
    
    public void getInsertAmortDates(Date repEnd, int terms, float[] arrayInterest,float[] arrayPremium, int loanID, float monthlyAmortization)
    {
        DateFormat df;
        df = new SimpleDateFormat("yyyy-MM-dd");
        df.setLenient(false);
        String repEndString = "";
        String insertString = "";
        Calendar calendar = Calendar.getInstance();
        Statement stmt = null;
        this.connect();
        float penalty = 0;
        try
        {
             stmt = conn.createStatement();
        }
        catch(Exception e)
        {
           e.printStackTrace();
        }
        
        try
        {           
            for(int i=0; i<terms;i++)
            {
                repEndString = df.format(repEnd);
                //System.out.println(repEndString);
                calendar.setTime(repEnd);
                insertString = "insert into loan_dtl (loanid,amordate,mon_amort,mon_interest,mon_premium,mon_penalty,mon_premium_bal,mon_interest_bal,mon_penalty_bal) values ('"+loanID+"',to_date('"+repEndString+"', 'yyyy-MM-dd'),'"+monthlyAmortization+"','"+arrayInterest[i]+"','"+arrayPremium[i]+"','"+penalty+"','"+arrayPremium[i]+"','"+arrayInterest[i]+"','"+penalty+"')";
                //System.out.println(insertString);
                stmt.addBatch(insertString);
                calendar.add(Calendar.MONTH, 1);
                repEnd = calendar.getTime();
            }
            stmt.executeBatch();
            JOptionPane.showMessageDialog(null, "Database Update: Success", "Updating database", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception o)
        {
            o.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: Database not updated", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
        finally
        {
            this.disconnect();
        }
        choice = 0;
        
    }
    
    public void getID()
    {
        String tempQuery = "select max(loanid) as loanid from loan_hdr";
        
	Statement stmt = null;       
	this.connect();
	conn = this.getConnection();
                
	try
        {
            stmt = conn.createStatement();
        }
                
	catch (SQLException e)
        {
        }
		
	ResultSet rs;
	try
        {
            rs = stmt.executeQuery(tempQuery);
            if(rs.next())
            loanID = rs.getInt("loanid");
        }
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}
        finally{
            this.disconnect();
        }
    }
    
    public void allReset()
    {
        textInterest.setText("");
        textCheckNo.setText("");
        textPrincipal.setText("");
        textTerms.setText("");
        textEndDate.setText("");
        textStartDate.setText("");
        textStartDate.setEnabled(true);
        textStartDate.setEditable(true);
        textEndDate.setEnabled(true);        
        
        labelAmortization.setText("");
        labelTotalPayment.setText("");
        labelTotalInterest.setText("");
        labelTotalPrincipal.setText("");
               
        comboTypeOfLoan.setSelectedIndex(0);
        comboTypeOfLoan.setEnabled(true);
        buttonCompute.setEnabled(true);
        buttonConfirm.setEnabled(false);
        //labelMember.setText("");
        
        Calendar cal = Calendar.getInstance();
        Date current = new Date();
        current = cal.getTime();
        textStartDate.setText(df.format(current));
        
        loanCalculate.reset();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddLoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() { 
                new AddLoan().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonCompute;
    private javax.swing.JButton buttonConfirm;
    private javax.swing.JComboBox comboTypeOfLoan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelAmortization;
    private javax.swing.JLabel labelMember;
    private javax.swing.JLabel labelTotalInterest;
    private javax.swing.JLabel labelTotalPayment;
    private javax.swing.JLabel labelTotalPrincipal;
    private javax.swing.JTextField textCheckNo;
    private javax.swing.JTextField textEndDate;
    private javax.swing.JTextField textInterest;
    private javax.swing.JTextField textPrincipal;
    private javax.swing.JTextField textStartDate;
    private javax.swing.JTextField textTerms;
    // End of variables declaration//GEN-END:variables
}
