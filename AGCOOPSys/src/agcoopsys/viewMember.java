/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package agcoopsys;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

public class viewMember extends javax.swing.JPanel {

    public viewMember()
    {
        initComponents();
        listMember.getTableHeader().setReorderingAllowed(false);
    }
    
    ConnectToDatabaseSys paramDB = new ConnectToDatabaseSys();
    public String dbUrl;
    public String dbDriver;
    public String username;
    public String password;
    public Connection conn;
    int rep = 0;
    String query = "Select memberid,firstname,midinit,lastname,address1,address2,address3,contactno1,contactno2,email,compid,contribution,contribtotal,maxshare,status,hiredt,resigndt,remarks from member order by lastname";

    public void getList()
    {
        String tempQuery = "";
        if(rep==0)
        {
            tempQuery = query;
        }
        //else
          //  tempQuery = "Select * from mydb.bookinformation where Title like '%"+bookTitle+"%';";
        
        //System.out.println(tempQuery);
	Statement stmt = null;       
	this.connect();
	conn = this.getConnection();
                
	try
        {
            stmt = conn.createStatement();
        }
                
	catch (SQLException e)
        {
            e.printStackTrace();
        }
		
	ResultSet rs;
	try
        {
            rs = stmt.executeQuery(tempQuery);
            listMember.setModel(DbUtils.resultSetToTableModel(rs));
            this.disconnect();
        }
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}
        listMember.setRowSelectionInterval(0, 0);
    }
        
    public void connect()
    {
        dbDriver = paramDB.getDbClass();
        dbUrl = paramDB.getDbUrl();
        password = paramDB.getPassword(); // CHANGE PASSWORD
        username = paramDB.getName();
                
        try
        {
            Class.forName(dbDriver).newInstance();
            conn = DriverManager.getConnection(dbUrl,username,password);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
	
    public Connection getConnection()
    {
	return conn;
    }
	
    public void disconnect()
    {
       try
       {
            conn.close();
       } 
       catch (Exception ex)
       {
            ex.printStackTrace();
       }
    }
    
    public void deleteMember()
    {
        try
        {
            int index = listMember.getSelectedRow();
            String i = listMember.getValueAt(index, 0).toString();
        
            String query = "delete from member where memberid ="+i;
            ConnectToDatabaseSys connectDB = new ConnectToDatabaseSys();
            connectDB.accessLoopDatabase(query);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error: Select row to delete", "Error", JOptionPane.ERROR_MESSAGE); 
        }
    }
    
    public void editMember() 
    {
            int index = listMember.getSelectedRow();
            String i = listMember.getValueAt(index, 0).toString();
            addMember aM = new addMember();
            aM.setVisible(true);
            aM.setLocationRelativeTo(null);
            aM.setResizable(false);
            aM.setTitle("Edit Member - Information");
            aM.checkInputEditMember(i);
    }
    
    public void addLoan()
    {
        int index = listMember.getSelectedRow();
        String i = listMember.getValueAt(index, 0).toString();
        addLoan aL = new addLoan();
        aL.setVisible(true);
        aL.setLocationRelativeTo(null);
        aL.setResizable(false);
        aL.setTitle("New Loan - Information");
        aL.addLoan(i);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listMember = new javax.swing.JTable();

        listMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(listMember);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listMember;
    // End of variables declaration//GEN-END:variables
}
