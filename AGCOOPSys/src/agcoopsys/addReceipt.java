/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package agcoopsys;

import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Acer
 */
public class addReceipt extends javax.swing.JFrame {
    private int compid;
    private String orno;
    private Date ordt;
    private String ordttext;
    private String finaldt;
    private String ordetail;
    private String billid;
    private float oramt;
    int orid, ordtlid;
    String memberid;
    DateFormat df; 
    ArrayList<Integer> arrayList = new ArrayList<>();
    ArrayList<String> arrayListCompany = new ArrayList<>();
    ArrayList<String> arrayListBilldtl = new ArrayList<>();
    ArrayList<ArrayList> arrayLoans;
    ArrayList<String> arrayTemp = new ArrayList<>();
    Vector<ArrayList> loans= new Vector();
    validateAllInputs validateInputs = new validateAllInputs();
    int choice = 0;
    public String dbUrl;
    public String dbDriver;
    public String username;
    public String password;
    public Connection conn;
    ConnectToDatabaseSys paramDB = new ConnectToDatabaseSys();
    int clid, regid, edid, calid, emid;
    float cont, cl, reg, ed,  cal,  em, goods, total ;
    String startDate, endDate;
    /**
     * Creates new form addReceipt
     */
    public addReceipt() {
        this.arrayLoans = new ArrayList<>();
        this.df = new SimpleDateFormat("yyyy-MM-dd");
        df.setLenient(false);
        initComponents();
        this.returnParams();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        filterText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        buttonFind1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        OKButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textOrno = new javax.swing.JTextField();
        comboCompany = new javax.swing.JComboBox();
        textOrdt = new javax.swing.JTextField();
        textOrdetail = new javax.swing.JTextField();
        textOramt = new javax.swing.JTextField();
        textBillid = new javax.swing.JTextField();
        buttonCancel = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonConfirm = new javax.swing.JButton();
        buttonFind = new javax.swing.JButton();
        buttonCompute = new javax.swing.JButton();

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame1.setMinimumSize(new java.awt.Dimension(781, 447));
        jFrame1.setResizable(false);

        jLabel7.setText("Search:");

        buttonFind1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.png"))); // NOI18N
        buttonFind1.setPreferredSize(new java.awt.Dimension(50, 25));
        buttonFind1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFind1ActionPerformed(evt);
            }
        });

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(searchTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(filterText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonFind1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(buttonFind1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKButton)
                .addGap(6, 6, 6))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Company");

        jLabel2.setText("OR Number");

        jLabel3.setText("Date");

        jLabel4.setText("Details");

        jLabel5.setText("Amount");

        jLabel6.setText("Bill Number");

        textOrdt.setText("2014-01-01");

        textOramt.setEnabled(false);

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonConfirm.setText("Confirm");
        buttonConfirm.setEnabled(false);
        buttonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmActionPerformed(evt);
            }
        });

        buttonFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.png"))); // NOI18N
        buttonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFindActionPerformed(evt);
            }
        });

        buttonCompute.setText("Compute");
        buttonCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComputeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboCompany, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textOrno)
                            .addComponent(textOrdt)
                            .addComponent(textOrdetail)
                            .addComponent(textOramt)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textBillid)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonFind, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(buttonClear)
                        .addGap(76, 76, 76)
                        .addComponent(buttonCompute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonConfirm)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textOrno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textOrdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textOrdetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textOramt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonFind, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(textBillid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConfirm)
                    .addComponent(buttonCancel)
                    .addComponent(buttonClear)
                    .addComponent(buttonCompute))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed

        comboCompany.setSelectedIndex(0);
        textOrno.setText("");
        textOrdt.setText("");
        textOrdetail.setText("");
        textOramt.setText("");
        textBillid.setText("");
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmActionPerformed
        try {
            // TODO add your handling code here:
            this.setCompid();
            this.setOrno();
            this.setOrdttext();
            this.setOrdetail();
            this.setOramt();
            this.setBillid();
            
            this.firstQuery();
        } catch (SQLException ex) {
            Logger.getLogger(addReceipt.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_buttonConfirmActionPerformed

    private void buttonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComputeActionPerformed
        // TODO add your handling code here:
        int errorCount=0;
        String errorMessages="";
        if(textBillid.getText().isEmpty())
        {
            errorMessages += "A receipt for this bill number already exists\n";
            errorCount++;
        }
        
        
        if(errorCount == 0)
        {
             String tempQuery = "select sum(mem_total) from bill_dtl where billid="+textBillid.getText();
        
            Statement stmt = null;       
            this.connect();
            conn = this.getConnection();
            ResultSet rs;
            try
            {
                stmt = conn.createStatement();
                rs = stmt.executeQuery(tempQuery);
                rs.next();
                textOramt.setText(rs.getString(1));
            }

            catch (SQLException e)
            {
                e.printStackTrace();
            }
            finally{
                this.disconnect();
            }
        }
        
        else if(errorCount>0)
        {
           // System.out.println(errorMessages);
            JOptionPane.showMessageDialog(null, errorMessages, "Error: Receipt Information", JOptionPane.ERROR_MESSAGE);
        }
        buttonConfirm.setEnabled(true);
        //buttonCompute.setEnabled(false);
    }//GEN-LAST:event_buttonComputeActionPerformed

    private void buttonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFindActionPerformed
        // TODO add your handling code here:
        //new findBill().setVisible(true);
        jFrame1.setVisible(true);
        jFrame1.setLocationRelativeTo(null);
        try
        {

            String tempQuery = "SELECT bill_hdr.billid as BILL_NO , company.compname as COMPANY, bill_hdr.billdt as BILL_DATE, bill_hdr.billamt as BILL_AMOUNT, bill_hdr.startdt as START_DATE, bill_hdr.enddt as END_DATE\n" +
                                "FROM bill_hdr\n" +
                                "INNER JOIN company\n" +
                                "ON bill_hdr.compid=company.compid";
            
            Statement stmt = null;
            this.connect();
            conn = this.getConnection();
            stmt = conn.createStatement();
            

            ResultSet rs;
            rs = stmt.executeQuery(tempQuery);
                searchTable.setModel(DbUtils.resultSetToTableModel(rs));
        }

        catch(Exception e)
        {

        }
        finally{
            this.disconnect();
            
        }
        
    }//GEN-LAST:event_buttonFindActionPerformed

    private void buttonFind1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFind1ActionPerformed

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(searchTable.getModel());
        searchTable.setRowSorter(sorter);
        String text = filterText.getText();
        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter(text));
        }
    }//GEN-LAST:event_buttonFind1ActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        
        textBillid.setText(getBillid());
        //System.out.println(getBillid());
        jFrame1.dispose();
    }//GEN-LAST:event_OKButtonActionPerformed

    
    public String getBillid(){
        //searchTable.getValueAt(searchTable.getSelectedRow(), 0).toString()
        
            startDate=searchTable.getValueAt(searchTable.getSelectedRow(), 4).toString();
            endDate=searchTable.getValueAt(searchTable.getSelectedRow(), 5).toString();
           // System.out.println(startDate+endDate);
        return searchTable.getValueAt(searchTable.getSelectedRow(), 0).toString();
    }
    
    public void connect()
    {
        dbDriver = paramDB.getDbClass();
        dbUrl = paramDB.getDbUrl();
        password = paramDB.getPassword(); // CHANGE PASSWORD
        username = paramDB.getName();
                
        try
        {
            Class.forName(dbDriver).newInstance();
            conn = DriverManager.getConnection(dbUrl,username,password);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
        
    public Connection getConnection()
    {
	return conn;
    }
	
    public void disconnect()
    {
       try
       {
            conn.close();
       } 
       catch (Exception ex)
       {
            ex.printStackTrace();
       }
    }
    
    public void firstQuery() throws SQLException
    {
        String errorMessages = "";
        ConnectToDatabaseSys connectDB = new ConnectToDatabaseSys();
        int errorCount = 0;
        //FORMAT
        
        orno = validateInputs.formatStringSpaces(orno);
        ordetail = validateInputs.formatStringSpaces(ordetail);
        billid= validateInputs.formatStringSpaces(billid);
        //THEN CHECK
        
            compid = this.getCompanyIdCombo(comboCompany.getSelectedIndex());
        
        try
        {
            if(!(connectDB.checkDuplicate(billid, 2)))
            {
                errorMessages += "A receipt for this bill number already exists\n";
                errorCount++;
            }
        }
        catch(Exception t)
        {
            errorMessages += "A receipt for this bill number already exists\n";
            errorCount++;
        }
                
        try
        {
            if(!(connectDB.checkDuplicate(orno, 3)))
            {
                errorMessages += "A receipt for this OR number already exists\n";
                errorCount++;
            }
        }
        catch(Exception t)
        {
            errorMessages += "A receipt for this OR number already exists\n";
            errorCount++;
        }
                
        if(!(validateInputs.checkForSpecial(orno)))
        {
            errorMessages += "OR Number: Cannot Contain special characters\n";
            errorCount++;
        }
        
        if(!(validateInputs.checkIfEmpty(billid)))
        {
            errorMessages += "Bill Number: Field cannot be empty\n";
            errorCount++;
        }
        
        try{  
            ordt = df.parse(ordttext);
            finaldt = df.format(ordt);
            //System.out.println(finaldt);
            
        } 
        catch (Exception p)
        { 
            //System.out.println(finaldt);
            errorMessages += "Date : Format YYYY-MM-DD\n";
            errorCount++;
        } 
                
        if(errorCount == 0)
        {
                String query = "";
                if(choice == 0)
                {
                    //System.out.println(compid+" "+orno+" "+finaldt+ordetail+" "+oramt+" "+billid);
                    query = "insert into or_hdr (compid, orno, ordt, ordetail, oramt, billid)"
                            + " values ('"+ compid +"','"+ orno + "','" + finaldt + "','" + ordetail + "','"
                            + oramt + "','" + billid + "')";
                }
                /*if(choice == 1)
                {
                    query = "update company set compname='"+ companyName +"',address1='"+ companyAddress1+"',address2='"+companyAddress2+"',address3='"+companyAddress3+"'"+
                            ",contactperson='"+companyContactPerson+"',contactno1='"+companyContact1+"',contactno2='"+companyContact2+"',email='"+companyEmail+"' where compid="+companyID;                            
                    choice = 0;
                }*/
                //System.out.println(query);
                 connectDB.accessInputDatabase(query);
                 this.secondQuery();
        }
        
        else if(errorCount>0)
        {
            //System.out.println(errorMessages);
            JOptionPane.showMessageDialog(null, errorMessages, "Error: Receipt Information", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    public void secondQuery() throws SQLException{
        this.getID();
        ConnectToDatabaseSys connectDB = new ConnectToDatabaseSys();
        String query = "select * from bill_dtl where billid="+textBillid.getText();
        
        ResultSet rs;
        this.connect();
        Statement stmt = null;
        try
        {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            while(rs.next())
           {
               memberid=rs.getString("memberid");
                //System.out.println("in2ndqrsnxt"+rs.getString("memberid"));
                if( rs.getString("contribution")==null)
                        cont=0;
                else
                    cont=Float.parseFloat(rs.getString("contribution"));
                if( rs.getString("cash_loanid")==null)
                        clid=0;
                else
                    clid=Integer.parseInt(rs.getString("cash_loanid"));
                if( rs.getString("cash_amount")==null)
                        cl=0;
                else
                    cl=Float.parseFloat(rs.getString("cash_amount"));
                if( rs.getString("reg_loanid")==null)
                        regid=0;
                else
                    regid=Integer.parseInt(rs.getString("reg_loanid"));
                if( rs.getString("reg_amount")==null)
                        reg=0;
                else
                    reg=Float.parseFloat(rs.getString("reg_amount"));
                if( rs.getString("educ_loanid")==null)
                        edid=0;
                else
                    edid=Integer.parseInt(rs.getString("educ_loanid"));
                if( rs.getString("educ_amount")==null)
                        ed=0;
                else
                    ed=Float.parseFloat(rs.getString("educ_amount"));
                if( rs.getString("calamity_loanid")==null)
                        calid=0;
                else
                    calid=Integer.parseInt(rs.getString("calamity_loanid"));
                if( rs.getString("calamity_amount")==null)
                        cal=0;
                else
                    cal=Float.parseFloat(rs.getString("calamity_amount"));
                if( rs.getString("emer_loanid")==null)
                        emid=0;
                else
                    emid=Integer.parseInt(rs.getString("emer_loanid"));
                if( rs.getString("emer_amount")==null)
                        em=0;
                else
                    em=Float.parseFloat(rs.getString("emer_amount"));
                if( rs.getString("goods_amount")==null)
                        goods=0;
                else
                    goods=Float.parseFloat(rs.getString("goods_amount"));
                if( rs.getString("mem_total")==null)
                        total=0;
                else
                    total=Float.parseFloat(rs.getString("mem_total"));
                
                
                
                String query2="INSERT INTO or_dtl " +
                "(   orid,  memberid, contribution,  cash_loanid,  cash_amount,  reg_loanid,  reg_amount,  educ_loanid,  educ_amount,  calamity_loanid,  calamity_amount,  emer_loanid,  emer_amount,  goods_amount,  memtotal) " +
                "VALUES ('"+orid+"','"
                        +rs.getString("memberid")+"','"
                        +cont+"','"
                        +clid+"','"
                        +cl+"','"
                        +regid+"','"
                        +reg+"','"
                        +edid+"','"
                        +ed+"','"
                        +calid+"','"
                        +cal+"','"
                        +emid+"','"
                        +em+"','"
                        +goods+"','"
                        +total+"')";
               
                connectDB.accessInputDatabase(query2);
                System.out.println(orid+" "+rs.getString("memberid")+" "+rs.getString("contribution")+" "+rs.getString("cash_loanid")+" "+rs.getString("cash_amount")+" "+
                        rs.getString("reg_loanid")+"','"
                        +rs.getString("reg_amount")+"','"
                        +rs.getString("educ_loanid")+"','"
                        +rs.getString("educ_amount")+"','"
                        +rs.getString("calamity_loanid")+"','"
                        +rs.getString("calamity_amount")+"','"
                        +rs.getString("emer_loanid")+"','"
                        +rs.getString("emer_amount")+"','"
                        +rs.getString("goods_amount")+"','"
                        +rs.getString("mem_total"));  
                
                
                //this.subledger1(orid, rs.getString("reg_loanid"), rs.getString("reg_amount"));

                String query3;
                query3 = "Update member set contribtotal=contribtotal+"+cont+" where memberid="+memberid;
                connectDB.accessLoopDatabase(query3);
                query3 = "Update goods_sold_dtl set balance=balance-"+goods+" where memberid="+memberid;
                connectDB.accessLoopDatabase(query3);
                query3 = "Update cashloan set balance=balance-"+cl+", status='C' where loanid="+clid; 
                connectDB.accessLoopDatabase(query3);

                if(regid>0  ){
                    arrayLoans.add(subledger1("reg", String.valueOf(regid), reg));
                    System.out.println("reg");
                }
                if(edid>0  ){
                    arrayLoans.add(subledger1("ed", String.valueOf(edid), ed));
                    System.out.println("ed");
                }
                if(calid>0  ){
                    arrayLoans.add(subledger1("cal", String.valueOf(calid), cal));
                    System.out.println("cal+"+subledger1("cal", String.valueOf(calid), cal).size());
                    //subledger2(subledger1("cal", String.valueOf(calid), cal));
                    //loans.add(subledger1("cal", String.valueOf(calid), cal));
                }
                if(emid>0  ){
                    arrayLoans.add(subledger1("em", String.valueOf(emid), em));
                    System.out.println("em");
                }

            this.subledger2(arrayLoans);
            float ortotal=cont+cl+reg+em+cal+ed+goods;
            query3 = "Update or_dtl set memtotal="+ortotal +"where ordtlid="+ordtlid; 
            connectDB.accessLoopDatabase(query3);
            

            }//while rs.next()
              
        }
        catch (SQLException e)
        {
            e.printStackTrace();
	}    
        finally
        {
            this.disconnect();
        
        }     
        this.dispose();
    }
    public ArrayList subledger1(String type, String loanid, float amount)
    {        //get all details subledger needs
        arrayTemp= new ArrayList();
        String query = "select * from loan_dtl where loanid="+loanid+" and amordate between to_date('"+startDate+"','yyyy-mm-dd') and to_date('"+endDate+"','yyyy-mm-dd') ";
        
        ResultSet rs;
        this.connect();
        Statement stmt = null;
        String premium_prev, interest_prev, penalty_prev;
       float premium, interest, penalty ;
       
        try
        {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            rs.next();
            System.out.println("in sub1 while"+loanid+" "+rs.getString("mon_interest"));
                interest_prev=rs.getString("mon_interest");
                premium_prev=rs.getString("mon_premium");
                interest=rs.getFloat("mon_interest");
                premium=rs.getFloat("mon_premium");
                //penalty_prev=rs.getString("mon_penalty_prev");
                if(amount-rs.getFloat("mon_interest")-rs.getFloat("mon_premium")==0)
                {
                    premium=0;
                    interest=0;
                }
                else if(interest+premium>amount)
                {
                    //interest=-amount;
                    if(amount-interest==0){//equals intereset
                        premium=rs.getFloat("mon_premium");
                        interest=0;
                    }
                    else if (amount-interest<0)//less than interest
                    {
                        premium=rs.getFloat("mon_premium");;
                        interest-=amount;
                    }
                    else if (amount-interest>0)//greater than interest
                    {
                        interest=0;
                        if(amount-interest<premium)//less than premium
                            premium-=(amount-interest);
                    }
                
                
            }
                arrayTemp.add(type);
                //arrayTemp.add(ordtlid);
                arrayTemp.add(rs.getString("loanid"));
                arrayTemp.add(rs.getString("loandtlid"));
                arrayTemp.add(rs.getString("mon_premium"));
                arrayTemp.add(rs.getString("mon_interest"));
                //arrayTemp.add(rs.getString("mon_penalty"));
                arrayTemp.add(String.valueOf(premium));
                arrayTemp.add(String.valueOf(interest));
                //arrayTemp.add(String.valueOf(penalty));
	}
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}   
        finally{
            this.disconnect();
        }
       
        return arrayTemp;
    }
    
    private void subledger2(ArrayList<ArrayList> arrayL) {
        String query3;
        this.getORDTLID();
        System.out.println("sub2size"+arrayL.size());
        for(int i=0; i<arrayL.size(); i++){
            arrayTemp=arrayL.get(i);
            
            if(arrayTemp.get(0).matches("reg")){
                query3 = "insert into subledger_reg(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay, interest_pay) "
                        + "values('"+ordtlid+"', '"+arrayTemp.get(1)+"', '"+arrayTemp.get(2)+"', '"+arrayTemp.get(3)+"', '"+arrayTemp.get(4)+"', '"+arrayTemp.get(5)+"', '"+arrayTemp.get(6)+"')";
                paramDB.accessLoopDatabase(query3);
                query3= "update loan_dtl set mon_premium_bal=mon_premium_bal-"+arrayTemp.get(5)+", mon_interest_bal=mon_interest_bal-"+arrayTemp.get(6)+
                        " where loandtlid="+arrayTemp.get(2);
                paramDB.accessLoopDatabase(query3);
            }
            else if(arrayTemp.get(0).matches("ed")){
                query3 = "insert into subledger_educ(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay, interest_pay) "
                        + "values('"+ordtlid+"', '"+arrayTemp.get(1)+"', '"+arrayTemp.get(2)+"', '"+arrayTemp.get(3)+"', '"+arrayTemp.get(4)+"', '"+arrayTemp.get(5)+"', '"+arrayTemp.get(6)+"')";
                paramDB.accessLoopDatabase(query3);
                query3= "update loan_dtl set mon_premium_bal=mon_premium_bal-"+arrayTemp.get(5)+", mon_interest_bal=mon_interest_bal-"+arrayTemp.get(6)+
                        " where loandtlid="+arrayTemp.get(2);
                paramDB.accessLoopDatabase(query3);
            }
            else if(arrayTemp.get(0).matches("cal")){
        System.out.println("2size"+arrayTemp.size());
                query3 = "insert into subledger_cal (ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay, interest_pay) "
                        + "values('"+ordtlid+"', '"+arrayTemp.get(1)+"', '"+arrayTemp.get(2)+"', '"+arrayTemp.get(3)+"', '"+arrayTemp.get(4)+"', '"+arrayTemp.get(5)+"', '"+arrayTemp.get(6)+"')";
                paramDB.accessLoopDatabase(query3);   
                query3= "update loan_dtl set mon_premium_bal=mon_premium_bal-"+arrayTemp.get(5)+", mon_interest_bal=mon_interest_bal-"+arrayTemp.get(6)+
                        " where loandtlid="+arrayTemp.get(2);
                paramDB.accessLoopDatabase(query3);
                System.out.println("in calinsert"+ordtlid+" "+arrayTemp.get(1)+" "+arrayTemp.get(2)+" "+arrayTemp.get(3)+" "+arrayTemp.get(4)+" "+arrayTemp.get(5)+" "+arrayTemp.get(6));
            }
            else if(arrayTemp.get(0).matches("em")){
                query3 = "insert into subledger_emer(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay, interest_pay) "
                        + "values('"+ordtlid+"', '"+arrayTemp.get(1)+"', '"+arrayTemp.get(2)+"', '"+arrayTemp.get(3)+"', '"+arrayTemp.get(4)+"', '"+arrayTemp.get(5)+"', '"+arrayTemp.get(6)+"')";
                paramDB.accessLoopDatabase(query3);
                query3= "update loan_dtl set mon_premium_bal=mon_premium_bal-"+arrayTemp.get(5)+", mon_interest_bal=mon_interest_bal-"+arrayTemp.get(6)+
                        " where loandtlid="+arrayTemp.get(2);
                paramDB.accessLoopDatabase(query3);
            }
        }
    }
 /*   private void subledger2(Vector arrayL) {
        String query3;
        this.getORDTLID();
        System.out.println("size"+arrayL.size());
        for(int i=0; i<arrayL.size(); i++){
            arrayTemp=arrayL.elementAt(i);
        System.out.println("size"+arrayTemp.get(i)));
            if(arrayTemp.get(0).matches("reg")){
                query3 = "insert into subledger_reg(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay,interest_pay) "
                        + "values("+ordtlid+", "+arrayTemp.get(1)+", "+arrayTemp.get(2)+", "+arrayTemp.get(3)+", "+arrayTemp.get(4)+", "+arrayTemp.get(5)+")";
                paramDB.accessLoopDatabase(query3);
            }
            else if(arrayTemp.get(0).matches("ed")){
                query3 = "insert into subledger_educ(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay,interest_pay) "
                 + "values("+ordtlid+", "+arrayTemp.get(1)+", "+arrayTemp.get(2)+", "+arrayTemp.get(3)+", "+arrayTemp.get(4)+", "+arrayTemp.get(5)+")";
                paramDB.accessLoopDatabase(query3);
            }
            else if(arrayTemp.get(0).matches("cal")){
        System.out.println("2size"+arrayLoans.size());
                query3 = "insert into subledger_educ(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay,interest_pay) "
                        + "values("+ordtlid+", "+arrayTemp.get(1)+", "+arrayTemp.get(2)+", "+arrayTemp.get(3)+", "+arrayTemp.get(4)+", "+arrayTemp.get(5)+")";
                paramDB.accessLoopDatabase(query3);
            }
            else if(arrayTemp.get(0).matches("em")){
                query3 = "insert into subledger_educ(ordtlid, loanid, loandtlid, mon_premium_prev, mon_interest_prev, premium_pay,interest_pay) "
                        + "values("+ordtlid+", "+arrayTemp.get(1)+", "+arrayTemp.get(2)+", "+arrayTemp.get(3)+", "+arrayTemp.get(4)+", "+arrayTemp.get(5)+")";
                paramDB.accessLoopDatabase(query3);
            }
        }
    }*/
    public void returnParams()
    {        
        final String query = "select compid, compname from company order by compname";
        
        ResultSet rs;
        this.connect();
        Statement stmt = null;
       
        try
        {
            stmt = conn.createStatement();
            companyList compList = new companyList();
            rs = stmt.executeQuery(query);
            int index = 0;
            while(rs.next())
            {
                comboCompany.addItem(rs.getString("compname"));
                //System.out.println(rs.getInt("compid") + " : " + rs.getString("compname"));
                arrayList.add(rs.getInt("compid"));
                arrayListCompany.add(rs.getString("compname"));
            }
            this.disconnect();      
	}
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}   
              
        
    }
       
    public void getID()
    {
        String tempQuery = "select max(orid) as orid from or_hdr";
        
	Statement stmt = null;       
	this.connect();
	conn = this.getConnection();
	ResultSet rs;
	try
        {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(tempQuery);
            if(rs.next())
            orid = rs.getInt("orid");
        }
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}
        finally{
            this.disconnect();
        }
    }
    public void getORDTLID()
    {
        String tempQuery = "select max(ordtlid) as ordtlid from or_dtl";
        
	Statement stmt = null;       
	this.connect();
	conn = this.getConnection();
	ResultSet rs;
	try
        {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(tempQuery);
            if(rs.next())
            ordtlid = rs.getInt("ordtlid");
        }
        
        catch (SQLException e)
        {
            e.printStackTrace();
	}
        finally{
            this.disconnect();
        }
    }
    /*
    public void checkInputEditReceipt(String id)
    {
        ResultSet rs;
        this.connect();
        Statement stmt = null;
        String query = "select * from member where memberid="+id;
        
        try
        {
            stmt = conn.createStatement();
        }
                
	catch (SQLException e)
        {
            e.printStackTrace();
        }
        String tempHired = "";
        String tempResigned = "";
        try
        {
            rs = stmt.executeQuery(query);
            if(rs.next())
            {
                textFirstName.setText(rs.getString("firstname"));
                textLastName.setText(rs.getString("lastname"));
                textMidInit.setText(rs.getString("midinit"));
                textMemAd1.setText(rs.getString("address1"));
                textMemAd2.setText(rs.getString("address2"));
                textMemAd3.setText(rs.getString("address3"));
                textMemCon1.setText(rs.getString("contactno1"));
                textMemCon2.setText(rs.getString("contactno2"));
                textMemEmail.setText(rs.getString("email"));
                this.initComboEdit(rs.getInt("compid"));
                textContribution.setText(rs.getString("contribution"));
                textTotal.setText(rs.getString("contribtotal"));
                tempHired = rs.getString("hiredt");
                tempResigned = rs.getString("resigndt");
                textRemark.setText(rs.getString("remarks"));
                this.initRadioEdit(rs.getString("status"));
                memberID = rs.getInt("memberid");
            }
            this.disconnect();      
	}
        
        catch (SQLException e)
        {
	}   
        choice = 1;
        try{
            this.initDateHired(tempHired);
            this.initDateResigned(tempResigned);
        }
        catch(Exception e)
        {
            
        }
    }

    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addReceipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonCompute;
    private javax.swing.JButton buttonConfirm;
    private javax.swing.JButton buttonFind;
    private javax.swing.JButton buttonFind1;
    private javax.swing.JComboBox comboCompany;
    private javax.swing.JTextField filterText;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable searchTable;
    private javax.swing.JTextField textBillid;
    private javax.swing.JTextField textOramt;
    private javax.swing.JTextField textOrdetail;
    private javax.swing.JTextField textOrdt;
    private javax.swing.JTextField textOrno;
    // End of variables declaration//GEN-END:variables

    /**
     * @param compid the compid to set
     */
    public void setCompid() {
        //this.compid = (Integer)comboCompany.getSelectedItem();
        this.compid = this.getCompanyIdCombo(comboCompany.getSelectedIndex());
    }

    /**
     * @param orno the orno to set
     */
    public void setOrno() {
        this.orno = textOrno.getText();
    }

    /**
     * @param ordt the ordt to set
     */
    public void setOrdt(Date ordt) {
        this.ordt = ordt;
    }

    public void setOrdttext() {
        this.ordttext = textOrdt.getText();
    }
    /**
     * @param ordetail the ordetail to set
     */
    public void setOrdetail() {
        this.ordetail = textOrdetail.getText();
    }

    /**
     * @param billid the billid to set
     */
    public void setBillid() {
        this.billid = textBillid.getText();
    }

    /**
     * @param oramt the oramt to set
     */
    public void setOramt() {
        this.oramt = Float.parseFloat(textOramt.getText().toString());
    }
    
    
    
    public int getCompanyIdCombo(int comboID)
    {
        int companyID = 0;
        companyID = arrayList.get(comboID);
        return companyID;
    }
    
    public void initComboEdit(int memid)
    {
        for(int i = 0; i<arrayList.size(); i++)
        {
            //System.out.println(memid +" : "+ arrayList.get(i));;
            if(memid == arrayList.get(i))
            {
                comboCompany.setSelectedItem(arrayListCompany.get(i));
            }
        }
    }

    
}


